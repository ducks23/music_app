---
service: music-app

plugins:
  - serverless-single-page-app-plugin
  - serverless-db-info-plugin
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-plugin-resource-tagging

provider:
  name: aws
  region: us-west-2

  runtime: python3.7

  stage: ${opt:stage, 'staging'}

  stackTags:
    Application: ${self:service}
    Stage: ${self:provider.stage}

  environment:
    SERVICE: ${self:service}
    STAGE: ${self:provider.stage}
    PDL_ENV: data_build/emr

  #endpointType: PRIVATE
  resourcePolicy:
    - Effect: Allow
      Principal: '*'
      Action: execute-api:Invoke
      Resource:
        - execute-api:/*/*/*

  vpc:
    securityGroupIds:
      - sg-02e6ea4e9fffc0d28

    subnetIds:
      - subnet-041383d708bea30f0
      - subnet-0bb2a9d64b97da670
      - subnet-0003408a6902f687c
      - subnet-0f882bf41d65b52c9

  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:*"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - ${self:service}-${self:provider.stage}-assets/*

package:
  exclude:
    - scripts/**
    - node_modules/**
    - .tox/**
    - .git/**
    - '*.swp'
    - .gitignore
    - env/**
    - venv/**
    - testenv/**

functions:
  api:
    handler: wsgi_handler.handler
    environment: ${file(./secrets/${self:provider.stage}.yaml)}

    layers:
      - {Ref: PythonRequirementsLambdaLayer}

    events:
      - http: ANY /
      - http: ANY {proxy+}

    memorySize: 512
    timeout: 30

custom:

  s3Bucket: ${self:service}-${self:provider.stage}-assets
  s3LocalPath: static/

  pythonRequirements:
    dockerizePip: true
    layer: true
    pythonBin: python3
    fileName: requirements/test-requirements.txt
    # https://biercoff.com/how-to-fix-package-not-found-error-importlib-metadata/
    zip: false
    slim: false

  wsgi:
    app: music_app.wsgi.application

resources:
  Resources:
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead

    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AssetsBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*

    AssetsDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: Assets
              DomainName: ${self:custom.s3Bucket}.s3.us-west-2.amazonaws.com
              S3OriginConfig: {}
          DefaultCacheBehavior:
            TargetOriginId: Assets
            DefaultTTL: 86400
            MaxTTL: 31536000
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Headers: ['Origin']
          Enabled: true

    AuroraClusterSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupName: aurora-${self:service}-${self:provider.stage}-dbsg
        DBSubnetGroupDescription: Aurora SubnetGroup
        SubnetIds:
          - subnet-0a7b904695e55d8ed
          - subnet-0d4605c10612b0cdb
          - subnet-0881906e33eb25bc0
          - subnet-02bc060304e2d7916

    AuroraClusterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Allow ingress from our vpc subnet cidrs on 5432."
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 172.31.0.0/16

    AuroraInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: postgres
        AllocatedStorage: 20
        DBInstanceClass: db.t2.micro
        DBSubnetGroupName: !Ref AuroraClusterSubnetGroup
        DBName: ${self:functions.api.environment.DATABASE_NAME}
        MasterUsername: ${self:functions.api.environment.DATABASE_USER}
        MasterUserPassword: ${self:functions.api.environment.DATABASE_PASS}


  Outputs:
    dbUri:
      Value: ${self:functions.api.environment.DATABASE_URI}

    dbHost:
      Value: ${self:functions.api.environment.DATABASE_HOST}

    dbPort:
      Value: ${self:functions.api.environment.DATABASE_PORT}

    dbPass:
      Value: ${self:functions.api.environment.DATABASE_PASS}

    dbUser:
      Value: ${self:functions.api.environment.DATABASE_USER}

    dbName:
      Value: ${self:functions.api.environment.DATABASE_NAME}

    assetsBucket:
      Value:
        'Ref': AssetsBucket
    assetsBucketUrl:
      Value:
        'Fn::GetAtt': [ AssetsBucket, WebsiteURL ]
    assetsDistribution:
      Value:
        'Fn::GetAtt': [ AssetsDistribution, DomainName ]
